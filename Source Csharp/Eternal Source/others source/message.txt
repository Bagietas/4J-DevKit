```csharp
public static dynamic ToggleOption<T>(Expression<Func<T>> ModOption)
            {
                try
                {
                    // Get propertyInfo and make sure it exists.
                    PropertyInfo propertyInfo = ((MemberExpression)ModOption.Body).Member as PropertyInfo;

                    if (propertyInfo is null)
                    {
                        throw new ArgumentException("The lambda expression 'ModOption' should point to a valid mod Property.");
                    }

                    // Get the name of the property.
                    string propertyName = propertyInfo.Name;

                    if (typeof(Minecraft_Cheats).GetProperty(propertyName) is null)
                    {
                        throw new ArgumentException("The lambda expression 'ModOption' should be a property of 'Minecraft_Cheats'");
                    }

                    // Get the value of the property.
                    dynamic value = propertyInfo.GetValue(null/*Static class*/);

                    // If this toggle has multible toggle states
                    if (value is int)
                    {
                        if (Attribute.IsDefined(propertyInfo, typeof(ToggleState)).Equals(false))
                        {
                            throw new ArgumentException("Your int based toggle must contain the 'ToggleState' attribute!");
                        }

                        ToggleState toggleStateAttribute = (ToggleState)propertyInfo.GetCustomAttribute(typeof(ToggleState));
                        int minSize = toggleStateAttribute.MinValue;
                        int maxSize = toggleStateAttribute.MaxValue;

                        // Reset to 0 from max size
                        if (value.Equals(maxSize) && minSize.Equals(0))
                        {
                            propertyInfo.SetValue(null/*Static class*/, 0);
                        }

                        // Reset to 0 from min size.
                        else if (value.Equals(minSize) && minSize < 0)
                        {
                            propertyInfo.SetValue(null/*Static class*/, 0);
                        }

                        // We are at max size, and min value is less than 0, we then start at -1.
                        else if(value.Equals(maxSize) && minSize < 0)
                        {
                            propertyInfo.SetValue(null/*Static class*/, -1);
                        }

                        // We are at less than 0, deincrement until min size
                        else if (value < 0)
                        {
                            propertyInfo.SetValue(null/*Static class*/, --value);
                        }

                        // Increase toggle by 1.
                        else
                        {
                            propertyInfo.SetValue(null/*Static class*/, ++value);
                        }

                        return propertyInfo.GetValue(null/*Static class*/);
                    }

                    // Toggle current state.
                    else if (value is bool)
                    {
                        propertyInfo.SetValue(null/*Static class*/, !value);
                        return propertyInfo.GetValue(null/*Static class*/);
                    }

                    else
                    {
                        throw new ArgumentException("ModOption should be a property of the 'Minecraft_Cheats' class that is either an int or bool!");
                    }
                }

                catch (Exception Ex)
                {
                    MessageBox.Show(Ex.Message, "Error!", MessageBoxButton.OK, MessageBoxImage.Error);
                    return null;
                }
            }
```